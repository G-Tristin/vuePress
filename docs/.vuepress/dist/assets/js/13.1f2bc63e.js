(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{218:function(s,t,a){"use strict";a.r(t);var e=a(0),v=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"计算机原理之浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机原理之浮点数","aria-hidden":"true"}},[s._v("#")]),s._v(" 计算机原理之浮点数")]),s._v(" "),a("p",[s._v("在计算机中数字使用二进制方式存储，所以理解浮点数的第一步是理解如何使用二进制表示小数。")]),s._v(" "),a("p",[s._v("首先我们来看下如何使用10进制来表示数字，例如数字12.34")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1*10^1 + 2*10^0 + 3*10^-1 + 4* 10^-2 = 12(34/100)\n")])])]),a("p",[s._v("接下来看如何使用二进制来表示数字，例如数字101.11表示")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1*2^2 + 0*2^1 + 1*2^0 + 1*2^-1 + 1*2^-2 = 5(3/4)\n")])])]),a("p",[s._v("但是使用这种方式表示数字是不完美的，它存在二个缺陷")]),s._v(" "),a("p",[s._v("(1)无法准确的表示所有的数字 比如0.1，0.2。")]),s._v(" "),a("p",[s._v("(2)表示非常大的数字时浪费较大的空间\n例如表达式5*2^100时二进制101后面跟了100个0，存储这样的数据将浪费极大的空间。\n因此人们需要一种更加简洁的方式来表示浮点类型。最终脱颖而出的IEEE标准")]),s._v(" "),a("p",[s._v("IEEE浮点标准")]),s._v(" "),a("p",[s._v("计算机当中使用二进制来存储数据，字节是一个存储的数据的长度的单位。目前大部分计算机都使用一个字节的长度是8位二进制数据。")]),s._v(" "),a("p",[s._v("单精度浮点数占用4个字节空间(一个字节通常8位 --00000000)即32位长度，双精度浮点数是64位。")]),s._v(" "),a("p",[s._v("另外提一下一个汉字占3个字节，一个英文字母占2个字节。这就是为什么汉字会出现乱码的根本原因，很多计算机读取二进制数据都是通过\n偶数位字节数读取，而汉字...")]),s._v(" "),a("p",[s._v("单精度浮点数的组成  第一位存储符号位 之后的8位用于存储指数 剩余的23位用于存储位数")]),s._v(" "),a("p",[s._v("IEEE浮点标准采用类似于科学计数法的方式表示浮点数，任意一个二进制浮点数可以表示成如下的形式")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("V = (-1)^s * M *2^E\n\n1.符号(sign)s表示符号位，当s=0,V为正数；当s=1，V为负数。\n2.尾数(significand) 表示有效数字  M是一个二进制小数，M大于等于1小于2。\n3.指数(exponent)E \n")])])]),a("p",[s._v("从公式  V = (-1)^s * M * 2E  我们可以得出：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("符号位：确定正、负。")])]),s._v(" "),a("li",[a("p",[s._v("尾数的位数(有效位)：确定精度。")])]),s._v(" "),a("li",[a("p",[s._v("指数的位数：确定所能表示的数的范围。")])])]),s._v(" "),a("p",[s._v('二进制浮点是以符号数值表示法的格式存储 -- 最高有效位被指定为符号位;"指数部分"，次最高有效的8个比特存储指数部分。剩下的23个比特存储有效位的小数部分(在非规范形式下整数部分默认为0，规范模式下整数部分默认为1)')]),s._v(" "),a("p",[s._v("指数偏移值：是指浮点数表示法中的指数域的编码值为指数的实际值加上某个固定的值，IEEE 754标准规定该固定值为 2^(e-1)，其中的 e 为存储指数的比特的长度。单精度为8，双精度为11。所以单精度的固定偏移值是2^(8-1) – 1 = 128 – 1 = 127，而双精度的固定偏移值是2^(11-1)– 1 = 1024 – 1 = 1023。")]),s._v(" "),a("p",[s._v("指数实际的存储：指数的值可能为负数，如果采用补码表示的话，全体符号位S和Exp自身的符号位将导致不能简单的进行大小比较。正因为如此，指数部分通常采用一个无符号的正数值存储。单精度的指数部分是-126 ~ +127，加上固定偏移值127，指数值的大小从1 ~ 254（0和255是特殊值）。浮点小数计算时，指数值减去固定偏移值将是实际的指数大小。")])])}],!1,null,null,null);t.default=v.exports}}]);
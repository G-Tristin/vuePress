(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{216:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("gulp的作用：需要看完参考资料之后再详细的说明")]),t._v(" "),s("h2",{attrs:{id:"gulp的详细学习文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gulp的详细学习文档","aria-hidden":"true"}},[t._v("#")]),t._v(" gulp的详细学习"),s("a",{attrs:{href:"https://juejin.im/entry/586a417561ff4b006d77fe85",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1)]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("gulp的使用流程一般是这样子的：首先通过gulp.src()方法获取到我们想要处理的文件流，\n然后把文件流通过pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到gulp.dest()中，gulp.dest()方法则把流中的内容写入到文件中.")]),t._v(" "),s("p",[t._v("eg：")]),t._v(" "),t._m(2),s("p",[t._v("使用gulp，仅需知道4个API即可：gulp.task(),gulp.src(),gulp.dest(),gulp.watch()，所以很容易就能掌握.")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("可以简单的理解为获取我们想要操作的文件")]),t._v(" "),s("p",[t._v("第一个参数为文件的路径 第二个参数为待定？")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("可以简单的理解为输出被操作之后的文件")]),t._v(" "),s("p",[t._v("note:必须要清楚的一点是通过gulp.dest()接收的第一个参数是输出文件的路径名称，而不是文件名称。输出文件的文件名称由dest.src()当中获取的名称决定，\n这2个名称是一致的。")]),t._v(" "),s("p",[t._v("下面说说生成的文件路径与我们给gulp.dest()方法传入的路径参数之间的关系。gulp.dest(path)生成的文件路径是我们传入的path参数后面再加上gulp.src()中有通配符开始出现的那部分路径。")]),t._v(" "),s("p",[t._v("eg:")]),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("如果我们想通过一个任务命令执行多个任务，则可以充分的利用deps这个特性")]),t._v(" "),t._m(12),s("p",[t._v("这样只要执行gulp default命令,那么one、two、three这些依赖任务都会被执行")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),s("p",[t._v("实现的方式有三种")]),t._v(" "),t._m(15),t._v(" "),t._m(16),s("p",[t._v("这是被two会在one的异步操作完成之后再执行")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),s("p",[t._v("gulp.watch用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等等。其语法为：")]),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),s("p",[t._v("gulp还有另外一种使用方式")]),t._v(" "),t._m(27),s("p",[t._v("glob和 opts 参数与第一种用法相同\ncb参数为一个函数。每当监视的文件发生变化时，就会调用这个函数,并且会给它传入一个对象，该对象包含了文件变化的一些信息，type属性为变化的类型，可以是 added , changed , deleted ； path 属性为发生变化的文件的路径")]),t._v(" "),t._m(28)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"gulp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"gulp的工作方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp的工作方式","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp的工作方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var gulp = require('gulp')\ngulp.src('./app.js') //通过路劲获取流文件\n.pipe(gulp.dest('dist/dest.js')) //将处理后的文件输出到dist/dest.js当中\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"gulp-src"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp-src","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp.src()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"gulp-dest"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp-dest","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp.dest()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.src('script/avalon/avalon.js') //没有通配符出现的情况\n.pipe(gulp.dest('dist')); //最后生成的文件路径为 dist/avalon.js\n\n//有通配符开始出现的那部分路径为 **/underscore.js\ngulp.src('script/**/underscore.js')\n//假设匹配到的文件为script/util/underscore.js\n.pipe(gulp.dest('dist')); //则最后生成的文件路径为 dist/util/underscore.js\n\ngulp.src('script/*') //有通配符出现的那部分路径为 *\n//假设匹配到的文件为script/zepto.js    \n.pipe(gulp.dest('dist')); //则最后生成的文件路径为 dist/zepto.js \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"gulp-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp-task","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp.task()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("语法"),e("code",[this._v("gulp.task(name[,deps],fn)")]),this._v("：通过gulp.task()来定义任务。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("name")]),this._v(" 任务的名称，必填")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("deps")]),this._v(" 指代当前任务的依赖任务是一个数组，如果存在当前任务的依赖任务，则会等待依赖的任务执行完毕之后再执行，可选")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("fn")]),this._v(" 任务函数，需要执行的代码都写在此处,可选")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"如果执行多个任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果执行多个任务","aria-hidden":"true"}},[this._v("#")]),this._v(" 如果执行多个任务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.task('default',['one','two','three'])\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"异步操作的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步操作的问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 异步操作的问题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("虽然当我们使用"),e("code",[this._v("gulp.task('two',['one'],fn)")]),this._v("时会先执行被依赖的one任务但是two任务是不会等待one任务当中的异步函数执行完毕的")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在异步操作完成之后使用回调函数来通知gulp这个异步任务已经完成，这个回调函数就是任务函数的第一个参数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.task('one',function(cb){\n  setTimeout(function(){\n    console.log('1');\n    cd();\n  },3000)\n})\ngulp.task('two',[one],function(){\n  console.log('two is done')\n})\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("定义任务是返回一个流对象 适用于任务就是操作gulp.src获取到的流的情况。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var Q = require('q'); //一个著名的异步处理的库 https://github.com/kriskowal/q\ngulp.task('one',function(cb){\n  var stream = gulp.src('client/**/*.js')\n      .pipe(doSomething()) //doSomething()中有某些异步操作\n      .pipe(gulp.dest('build'));\n    return stream;\n});\n\ngulp.task('two',['one'],function(){\n  console.log('two is done');\n});\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("返回一个Promise对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var Q = require('q'); //一个著名的异步处理的库 https://github.com/kriskowal/q\ngulp.task('one',function(cb){\n  var deferred = Q.defer();\n  // 做一些异步操作\n  setTimeout(function() {\n     deferred.resolve(); // promise的进程被放在异步处理函数当中\n  }, 5000);\n  return deferred.promise; //返回值是一个promise\n});\n\ngulp.task('two',['one'],function(){\n  console.log('two is done');\n});\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"gulp-watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp-watch","aria-hidden":"true"}},[this._v("#")]),this._v(" gulp.watch()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.watch(glob[,opts],tasks)\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("glob")]),this._v("为要监视的文件匹配模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("opts")]),this._v("可选的参数 基本不使用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("tasks")]),this._v("为文件变化后要执行的任务，是一个数组")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.task('uglify',function(){\n  //do something\n});\ngulp.task('reload',function(){\n  //do something\n});\ngulp.watch('js/**/*.js', ['uglify','reload']); \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.watch(glob[, opts, cb])\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("gulp.watch('js/**/*.js', function(event){\n  console.log(event.type); //变化类型 added为新增,deleted为删除，changed为改变\n  console.log(event.path); //变化的文件的路径\n})\n")])])])}],!1,null,null,null);e.default=a.exports}}]);
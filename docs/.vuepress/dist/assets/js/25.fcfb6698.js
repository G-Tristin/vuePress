(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{178:function(t,s,e){"use strict";e.r(s);var n=e(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"node流-stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node流-stream","aria-hidden":"true"}},[t._v("#")]),t._v(" node流(stream)")]),t._v(" "),e("p",[t._v("流（stream）在 Node.js 中是处理流数据的抽象接口（abstract interface）。 stream 模块提供了基础的 API 。使用这些 API 可以很容易地来构建实现流接口的对象。Node.js 提供了多种流对象。 例如， HTTP 请求 和 process.stdout 就都是流的实例。流可以是可读的、可写的，或是可读写的。所有的流都是 EventEmitter 的实例。")]),t._v(" "),e("h2",{attrs:{id:"介绍stdin-stdout-i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍stdin-stdout-i-o","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍stdin|stdout(I/O)")]),t._v(" "),e("p",[t._v("stdin和stdout是绑定在process下的对象,process.stdin.on('data',fn(chunk){})监听键盘的事件(当我们按下enter键时会中断一次输入).回调函数中的参数是键盘输入的数据,process.stdout.write()在命令行输出内容")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var num1,num2\nprocess.stdout.write('请输入mun1的值 :')\nprocess.stdin.on('data',function(chunk){\n  if(!num1){\n    num1 = Number(chunk)\n    process.stdout.write('请输入num2的值 :')\n  }else{\n    num2 = Number(chunk)\n    process.stdout.write('sum:' + (num1+num2))\n    process.exit() //显示的结束进行\n  }\n})\n")])])])])}],!1,null,null,null);r.options.__file="node输入输出流.md";s.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{176:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("react的详细内容可以在"),s("a",{attrs:{href:"https://react.docschina.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("当中查看，此处我之关注的是我再react当中看到的需要注意的地方。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),s("p",[t._v("这种看起来有些奇怪的标签语法既不是字符串也不是HTML。他被称为JSX，是一种javaScript的语法扩展。我们推荐在React中使用JSX来描述用户界面。\nJSX看起来可能比较像是模板语言，但事实上它完全是在JavaScript内部实现的。")]),t._v(" "),s("p",[t._v("关于JSX的个人理解:")]),t._v(" "),s("p",[t._v("我这里所说的对JXS的理解并不是说，JSX的实现原理是什么？而是我们在实际开发过程中如何避免写出错误的JSX语法。在JSX中当我们想要嵌入js语句需要使用\n{}将其包裹起来，并且该语句可以理解为会立即执行。并且执行的结果(返回值)必将是：类似HTML结构的语句或者文本字段。")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("重点:")]),t._v(" "),s("p",[t._v("JSX本身也是一种表达式")]),t._v(" "),s("p",[t._v("在编译之后，JSX其实会被转化为普通JavaScript对象(它不是一中HTML结构)，这意味着，我们可以在if或者for语句当中使用JSX，将它赋值给变量，当做参数传入，作为返回值都可以。 因为它是一个对象！！！")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("生命周期指的是React组件从创建到卸载的整个过程。state则负责管理React的一些状态信息。")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("note:")]),t._v(" "),t._m(6),t._v(" "),t._m(7),s("p",[t._v("React当中也使用了一个单项数据流的概念")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),s("p",[t._v("React的条件渲染和Jacascript中的一致，使用javascript的运算符if或者条件运算符来创建表示当前状态的元素，然后让React根据条件状态来更新UI")]),t._v(" "),t._m(14),t._v(" "),s("p",[t._v("可以使用变量来存储元素")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._m(18),s("p",[t._v("为什么可以这么实现？")]),t._v(" "),s("p",[t._v("因为在JavaScript当中，使用与运算符 && 。 若果是 true && code。那么返回的总是code。所以可以用它来做条件判断")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("在很多情况下我们要分条件的渲染一些组件除了以上的一些方式之外，我们还可以是用阻止组件渲染的方式来分条件的渲染组件。")]),t._v(" "),s("p",[t._v("实现方式就是让render函数返回null,因为render函数返回的所有JSX代码最后的编译结果都是object。")]),t._v(" "),t._m(21)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[this._v("#")]),this._v(" REACT")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"jsx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsx","aria-hidden":"true"}},[this._v("#")]),this._v(" JSX")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const element = <h1>Hello,world!<h1>;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们任意的在JXS中使用JavaSript表达式，在JSX当中的表达式要包含在大括号里面")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"state-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state-生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" state&生命周期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当我们直接更新state当中的属性值的时候是不会触发视图更新的\n我们需要通过this.setState({comment:'hello'})来动态的跟新属性才能触发视图的跟新变化")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("React可以将多个setState()调用合并成一个调用来提高性能")]),this._v(" "),e("li",[this._v("React当中的状态如果有异步的状态更新的话，通过setState()传入一个对象可能会无法触发视图的跟新，这个时候需要使用函数来保证异步函数执行之后触发视图的更新")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("this.setState((prevState,props)=>({\n  counter:prevState.counter + props.increment\n  //比如此处的props.increment的状态是异步改变的 那么久必须使用这种函数的形式来触发视图更新\n}))\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"react事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react事件","aria-hidden":"true"}},[this._v("#")]),this._v(" React事件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在React当中 所有的事件都需要给它绑定this对象对该组件本身上面，如果不绑定函数当中的this会默认指向执行环境")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("constructor(props){\n  super(props);\n  this.state = {isToggle:true}\n  this.handleClick = this.handleClick.bind(this) //在constuctor当中this默认指向该类的实例 或者在改函数被调用的时候绑定this对象\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在React对象当中事件对象要放在参数的最后面 这与之前事件对象的参数位子不同")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('Class Popper extend React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      name:"hello world"\n    }\n  }\n  preventPop(name,e){\n    e.preventDefault\n    alert(name)\n  }\n  render(){\n    return (\n      <div onClick={this.preventPop.bind(this,this.state.name)}>Click<div>\n    )\n  }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"条件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染","aria-hidden":"true"}},[this._v("#")]),this._v(" 条件渲染")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("元素变量")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("render(){\n  const isTrue = this.state.isTrue;\n  let button = '';\n  if(isTrue){\n    button = <children onClick={this.Click.bind(this)}></children>\n  }else{\n    button = <children onClick={this.Click.bind(this)}></children>\n  }\n  return {\n    <div>\n    {button}\n    </div>\n  }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("与运算符\n可以通过使用{}包裹代码的形式在JSX中可以嵌入任何的表达式，也包括JavaScript当中的逻辑符与 && 它可以方便的渲染一个元素，\n值得注意的是，JavaScript 中的一些 “falsy” 值(比如数字0)，它们依然会被渲染。要解决这个问题，请确保 && 前面的表达式始终为布尔值。\n相反，如果你想让类似 false、true、null 或 undefined 出现在输出中，你必须先把它转换成字符串")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<div>\n  My JavaScript variable is {String(myVariable)}.\n</div>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("render(){\n  return{\n    <div>\n      <h1></h1>\n      {\n        this.state.unreadMessages.length>0 && <h2>You have {unreadMessages.length} unread messages.</h2>\n      }\n    </div>\n  }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("三目运算符 实现方式和原理和以上的都差不多没有必要再赘述。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"阻止组件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阻止组件渲染","aria-hidden":"true"}},[this._v("#")]),this._v(" 阻止组件渲染")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("render(){\n  if(this.props.visible){\n    return {\n      <div> this is visible</div>\n    }else{\n      return null\n    }\n  }\n}\n")])])])}],!1,null,null,null);a.options.__file="README.md";e.default=a.exports}}]);
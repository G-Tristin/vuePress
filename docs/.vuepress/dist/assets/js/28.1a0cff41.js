(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{175:function(t,e,a){"use strict";a.r(e);var n=a(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("redux的流程分析")]),t._v(" "),a("p",[t._v("一个完整的redux的实例")]),t._v(" "),t._m(1),a("p",[t._v("redux当中有2个必须要注意的点 1.action的函数化构造 2.reducer的拆分")]),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("方法一：手动拆分")]),t._v(" "),a("p",[t._v("拆分前")]),t._v(" "),t._m(3),a("p",[t._v("拆分后")]),t._v(" "),t._m(4),a("p",[t._v("方法2 ：使用内置方法")]),t._v(" "),a("p",[t._v("Redux 提供了一个combineReducers方法，用于 Reducer 的拆分,你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer。")]),t._v(" "),t._m(5),a("p",[t._v("这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法。")]),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),a("p",[t._v("redux当中的中间件的作用就是给store.dispatch()添加功能")]),t._v(" "),a("p",[t._v("中间件的使用：")]),t._v(" "),t._m(10),a("p",[t._v("虽然看起来中间件不是直接作用在sotre.dispatch上但是在源码当中，它作用的地方就是store.dispatch()")]),t._v(" "),a("p",[t._v("中间件的主要作用是为了处理异步操作：")]),t._v(" "),a("p",[t._v("异步操作的基本思路：")]),t._v(" "),a("p",[t._v("异步需要3个action,请求前发送一个action 请求成功后一个action 请求失败后触发一个action 一共3个，同步只需要一个。")]),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("还是看"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),a("OutboundLink")],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[this._v("#")]),this._v(" redux")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import createStore form 'redux';\nconst state = {number:1}\nconst reducer = function(state,action){ //reducer函数可以理解为状态修改器\n必须通过dispath来触发状态的修改 而状态具体要修改什么，则由action来决定 第一个参数为初始状态\n  switch (action.type){\n    case 'add':\n      const number = state.number++\n      return Object.assign({},state,{number})  //要引起状态改变必须返回一个完整的新的state对象 注意对象存在引用的问题\n    default\n      return\n  }\n}\nconst store = createStore(reducer);\naction //是一个对象，当中必须要存在的一个属性是type用来代表这个action，相当于是这个action的名字\n由于action可能会有多个，所以常见的用法是用一个函数构造action 方法如下\nfunction createAction(type,text){\n  return {\n    type,\n    text,\n  }\n}\nconst action = createAction('add','hello') // 创建了一个action\nstore.dispatch({ //触发reducer函数 告诉它需要状态修改 并且把要修改的内容当成参数传入\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n});\nstore.dispatch(createAction('add','aaa')) //是否可以通过这种方式来动态的创建action并提交修改\nstore.subscribe(()=>{\n  let newState = store.getState();\n  component.setState(newState);\n})\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"如何实现reducer的拆分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现reducer的拆分","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何实现reducer的拆分")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const chatReducer = (state = defaultState, action = {}) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ADD_CHAT:\n      return Object.assign({}, state, {\n        chatLog: state.chatLog.concat(payload)\n      });\n    case CHANGE_STATUS:\n      return Object.assign({}, state, {\n        statusMessage: payload\n      });\n    case CHANGE_USERNAME:\n      return Object.assign({}, state, {\n        userName: payload\n      });\n    default: return state;\n  }\n};\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function chatLog(state,action){\n  ...\n}\nfunction statusMessage(state,action){\n  ...\n}\nfunction userName(state,action){\n  ...\n}\nconst chatReducer = (state = defaultState, action = {}) => {\n  return {\n    chatLog: chatLog(state.chatLog, action),\n    statusMessage: statusMessage(state.statusMessage, action),\n    userName: userName(state.userName, action)\n  }\n};\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import { combineReducers } from 'redux';\n\nconst chatReducer = combineReducers({\n  chatLog,\n  statusMessage,\n  userName\n})\n\nexport default todoApp;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const reducer = combineReducers({\n  a: doSomethingWithA,\n  b: processB,\n  c: c\n})\n\n// 等同于\nfunction reducer(state = {}, action) {\n  return {\n    a: doSomethingWithA(state.a, action),\n    b: processB(state.b, action),\n    c: c(state.c, action)\n  }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"store的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" store的实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("store.getState() ---获取当前状态")]),this._v(" "),e("li",[this._v("store.dispatch() ---触发action")]),this._v(" "),e("li",[this._v("store.subscribe() ---设置监听器,store一旦变化 就会调用监听器里的回调函数，一般写入setState()的函数或者render()函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"redux-中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-中间件","aria-hidden":"true"}},[this._v("#")]),this._v(" redux 中间件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("import { applyMiddleware, createStore } from 'redux';\nimport createLogger from 'redux-logger';\nconst logger = createLogger();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("使用redux-thunk中间件")]),this._v(" "),e("li",[this._v("使用redux-promise中间件")])])}],!1,null,null,null);r.options.__file="redux.md";e.default=r.exports}}]);
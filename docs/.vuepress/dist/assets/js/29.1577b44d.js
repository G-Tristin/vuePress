(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{174:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"受控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#受控组件","aria-hidden":"true"}},[e._v("#")]),e._v(" 受控组件")]),e._v(" "),t("p",[e._v("所有的表单都必须转化成受控组件的形式")]),e._v(" "),t("p",[e._v("我们通过使react变成一种单一数据源的状态来结合二者。React负责渲染表单的组件仍然控制用户后续输入时所发生的变化。相应的，其值由React控制的输入表单元素称为“受控组件”。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'\'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value}); //表单text当中的数据依旧在组件当中的state保管 这就是表单受控组件的体现\n  }\n\n  handleSubmit(event) {\n    alert(\'A name was submitted: \' + this.state.value);\n    event.preventDefault(); //阻止了表单提交的默认事件 通过触发组件当中的定义事件来提交 这就是表单受控组件的体现\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type="text" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')])])]),t("p",[e._v("受控的好处")]),e._v(" "),t("p",[e._v("使用”受控组件”,每个状态的改变都有一个与之相关的处理函数。这样就可以直接修改或验证用户输入。例如，我们如果想限制输入全部是大写字母，我们可以将handleChange 写为如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("handleChange(event) {\n  this.setState({value: event.target.value.toUpperCase()});\n}\n")])])]),t("h2",{attrs:{id:"多个输入的解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个输入的解决方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 多个输入的解决方法")]),e._v(" "),t("p",[e._v("当你有处理多个受控的input元素时，你可以通过给每个元素添加一个name属性，来让处理函数根据 event.target.name的值来选择做什么？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \'checkbox\' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Is going:\n          <input\n            name="isGoing"\n            type="checkbox"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          Number of guests:\n          <input\n            name="numberOfGuests"\n            type="number"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}\n')])])])])}],!1,null,null,null);s.options.__file="受控组件.md";n.default=s.exports}}]);
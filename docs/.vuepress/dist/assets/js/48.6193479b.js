(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{170:function(e,n,a){"use strict";a.r(n);var t=a(0),r=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"在npm包或者umd库的声明文件中扩展全局变量的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在npm包或者umd库的声明文件中扩展全局变量的类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 在npm包或者UMD库的声明文件中扩展全局变量的类型")]),e._v(" "),a("p",[e._v("如之前所说，对于一个npm包或者UMD库的声明文件，只有export导出的类型声明才能被导入。所以对于npm包或者UMD库，\n如果导入此库后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型 ---而全局变量的类型就有可能是一个接口（interface），那就是declare global。")]),e._v(" "),a("p",[e._v("首先理解declare global就选要理解上面这段话的场景，意思是当我们在基础文件当中导入一个第三方库的时候，并且这个三方库当中定义了一些全局\n变量或者说给某些全局变量添加了新的属性或者方法。那么我们需要给这个三方库的声明文件中通过declare扩展一些我们在使用这个第三方库时会使用到的全局变量的类型(一般使用interface)。并且由于可以扩展全局变量的这个特性，我们也可以在这个声明文件当中扩展一些我们会使用到的但是与这个三方库无关的全局变量的类型\n这样虽然可以减少声明文件，但是会导致声明文件混淆，表意不清不建议使用。")]),e._v(" "),a("h2",{attrs:{id:"declare-global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declare-global","aria-hidden":"true"}},[e._v("#")]),e._v(" declare global")]),e._v(" "),a("p",[e._v("使用declare global可以在npm包或者UMD库的声明文件中扩展全局变量的类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// types/foo/index.d.ts\ndeclare global {\n  interface String{ // 这里应当时理解为第三方库扩展了String对象的属性，我们需要在声明文件中声明这个扩展属性的类型\n    prependHello():string;\n  }\n  interface User{ //这是扩展了object的一种类型 并且提升到全局对象变量的类型 \n    name:string;\n    age:number;\n  }\n}\nexport {}\n\n// src/index.ts\n'bar'.prependHello(); //此处使用了declare global扩展的全局变量String\n")])])]),a("h2",{attrs:{id:"declare-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declare-module","aria-hidden":"true"}},[e._v("#")]),e._v(" declare module")]),e._v(" "),a("p",[e._v("模块插件 有时通过import导入一个模块插件，可以改变一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有\n类型声明文件，就会导致类型不完整，缺少插件部分的类型。ts提供了一个语法declare module,它可以用来扩展原有的模块类型。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// types/moment-plugin/index.d.ts\nimport * as moment from 'moment'\ndeclare module 'moment'{\n  export function foo(): moemnt.CalendarKey\n}\n\n// src/index.ts\nimport * as moemnt from 'moment'\nimport 'moment-plugin'\nmoment.foo()\n")])])]),a("p",[e._v("declare module 也可用于在一个文件中一次性声明多个模块的类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// types/foo-bar.d.ts\ndeclare module 'foo'{\n  export interface Foo{\n    foo:string;\n  }\n}\n\ndeclare module 'bar'{\n  export function bar():sting\n}\n\n// src/index.ts\nimport {Foo} from 'foo'\nimport * as bar from 'bar'\n\nlet f:Foo\nbar.bar()\n")])])]),a("h2",{attrs:{id:"声明文件中的依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明文件中的依赖","aria-hidden":"true"}},[e._v("#")]),e._v(" 声明文件中的依赖")]),e._v(" "),a("p",[e._v("一个声明文件有时会依赖另一个声明文件中的类型，比如在前面的declare module的例子中，我们就在声明文件中导入了moment,并使用了moment.CalendarKey这个类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// types/moment-plugin/index.d.ts\nimport * as moment from 'moment'\ndeclare module 'moment'{\n  export function foo():moment.CalendarKey\n}\n")])])])])}],!1,null,null,null);n.default=r.exports}}]);
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{208:function(t,e,n){\"use strict\";n.r(e);var a=n(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"content\"},[n(\"h1\",{attrs:{id:\"es6类\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es6类\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" ES6类\")]),t._v(\" \"),n(\"p\",[t._v(\"ES6类的基础教学可以在网上搜索阮一峰的教学上面的教程已经非常的详细了,而我自己给自己写的就是一些容易忘记的地方.\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"es5类和es6类的区别\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es5类和es6类的区别\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" ES5类和ES6类的区别\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"定义在原型上的方法的可枚举性\")])]),t._v(\" \"),n(\"p\",[t._v(\"在ES5类中在原型上定义方法是可以枚举的,但是在ES6中定义的方法是不可枚举的\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"var Point = function(){\\n    //...\\n}\\nPoint.prototype.toString=function(){\\n    //...\\n}\\nObject.keys(Point.prototype) //['toString']\\nObject.getOwnPrototypeNames(Point.prototype)//['constructor','toString']\\n\\n\\nclass Point{\\n    constructor(x,y){\\n        //...\\n    }\\n\\n    toString(){\\n\\n    }\\n}\\nObject.keys(Point.prototype) //[]\\nObject.getOwnPrototypeNames(Point.prototype) //['constructor','toString']\\n\")])])]),n(\"ul\",[n(\"li\",[t._v(\"不存在变量提升:必须先声明类,才能构建出实例\")])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"constructor\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constructor\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Constructor\")]),t._v(\" \"),n(\"p\",[t._v(\"constructor方法是类的默认方法,通过new命令生成对象实例时,会自动调用该方法.\\n一个类必须有constructor方法,如果没有显示定义,一个空的constructor方法会被默认添加.\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Point{\\n    \\n}\\n\\n//等同于\\n\\nclass Point{\\n    constructor(){\\n        //return this // 不需要显示添加默认返回this\\n        //也可以被改写 return Object.create(null)\\n    }\\n}\\n\")])])]),n(\"h2\",{attrs:{id:\"类的实例\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类的实例\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 类的实例\")]),t._v(\" \"),n(\"p\",[t._v(\"如果想要定义自身的属性,而不是定义在类的prototype上那么我们需要将属性定义在constructor中的this上\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Point{\\n    constructor(x,y){\\n        this.x = x;\\n        this.y = y\\n    }\\n}\\nvar point = new Point(2,3)\\n\\npoint.2 === 2\\npoint.3 === 3\\n\")])])]),n(\"h2\",{attrs:{id:\"取值函数-getter-和存值函数-setter\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#取值函数-getter-和存值函数-setter\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 取值函数(getter)和存值函数(setter)\")]),t._v(\" \"),n(\"p\",[t._v(\"与ES5一样,在'类'的内部可以使用get和set关键字,对某个属性设置存值函数和取值函数,拦截该属性的存取行为\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class MyClass{\\n    constructor(){\\n        //...\\n    }\\n    get prop(){\\n        console.log('getter') \\n    }\\n    set prop(value){\\n        console.log('setter'+value)\\n    }\\n}\\n\\nlet bet = new MyClass()\\nbet.prop = 123 //setter123\\nbet.prop // getter\\n\")])])]),n(\"h2\",{attrs:{id:\"静态方法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 静态方法\")]),t._v(\" \"),n(\"p\",[t._v(\"类当中的静态方法可以通过在属性名前面添加'static'关键字来声明这是类的静态方法\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"在静态方法中定义的this,就是只想类而不是实例\")]),t._v(\" \"),n(\"li\",[t._v(\"父类的静态方法可以被子类继承\")]),t._v(\" \"),n(\"li\",[t._v(\"静态方法也是可以从super对象上调用的\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Foo{\\n    static classMethods(){\\n        return 'hello'\\n    }\\n    static bar(){\\n        this.baz()\\n    }\\n    static baz(){\\n        console.log('baz')\\n    }\\n}\\n\\nclass Bar extends Foo{\\n    static classMethods(){\\n        return super.classMethods() +',too' //子类定义自己的静态方法,该方法调用父类的静态方法\\n    }\\n}\\nFoo.classMethods() // hello\\nFoo.bar(); // baz\\nlet foo = new Foo()\\nfoo.classMethods() // foo.classMethods is not a function \\nBar.classMethods() // \\\"hello,too\\\"\\n\")])])]),n(\"h2\",{attrs:{id:\"实例属性的新写法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例属性的新写法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 实例属性的新写法\")]),t._v(\" \"),n(\"p\",[t._v(\"实例自身属性的新写法 就是直接写在类的最顶层,而不是写在constructor属性的this下面.该方式的优点是直观\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Foo{\\n    bar=\\\"hello\\\";\\n    baz=\\\"world\\\"\\n    constructor(){\\n        //...\\n    }\\n}\\n等同于\\nclass Foo{\\n    constructor(){\\n        this.bar = 'hello';\\n        this.baz = 'world'\\n    }\\n}\\n\")])])]),n(\"h2\",{attrs:{id:\"静态属性\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 静态属性\")]),t._v(\" \"),n(\"p\",[t._v(\"静态属性值得是Class本身的属性,而不是定义在实例对象上的属性\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class MyClass{\\n    static myStaticProp = 42 //目前只是提案\\n}\\nMyClass.name = 'class' //这是目前唯一可行的给类添加静态属性的方式\\n\")])])]),n(\"h2\",{attrs:{id:\"new-target属性\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#new-target属性\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" new.target属性\")]),t._v(\" \"),n(\"p\",[t._v(\"该方法在够着函数当中使用返回new命令作用于的那个构造函数,返回当前类\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Rectangle {\\n  constructor(length, width) {\\n    console.log(new.target === Rectangle);\\n    this.length = length;\\n    this.width = width;\\n  }\\n}\\n\\nvar obj = new Rectangle(3, 4);  // true\\n\")])])]),n(\"h3\",{attrs:{id:\"new-target属性的使用重点\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#new-target属性的使用重点\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" new.target属性的使用重点\")]),t._v(\" \"),n(\"p\",[t._v(\"当子类继承父类的时候,new.target将返回的是子类,通过这个特性我们可以定义一些自由父类可以或者只有子类可用的方法\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class Shape {\\n  constructor() {\\n    if (new.target === Shape) {\\n      throw new Error('本类不能实例化');\\n    }\\n  }\\n}\\n\\nclass Rectangle extends Shape {\\n  constructor() {\\n    super();\\n    // ...\\n  }\\n}\\n\\nvar x = new Shape();  // 报错  在父类实例化时 new.target是Shape\\nvar y = new Rectangle();  // 正确 在子类实例化时 new.target是Rectangle\\n\")])])])])}],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}
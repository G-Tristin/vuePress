{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{200:function(e,a,t){\"use strict\";t.r(a);var n=t(0),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t(\"div\",{staticClass:\"content\"},[t(\"h2\",{attrs:{id:\"umd库\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#umd库\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" UMD库\")]),e._v(\" \"),t(\"p\",[e._v(\"既可以通过\"),t(\"code\",[e._v(\"<script/>\")]),e._v(\" 标签引入，又可以通过import导入的库，称为UMD库。相比于npm包类型的声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts提供了新的语法。export as namespace\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"export-as-namespace\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#export-as-namespace\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" export as namespace\")]),e._v(\" \"),t(\"p\",[e._v(\"一般使用export as namespace时，都是先有了npm包的声明文件，再基于它添加一条export as namespace语句，即可将生命好的一个变量声明为全局变量，举例如下:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// type/foo/index.d.ts\\nexports as namespace foo;\\nexport = foo\\n\\ndeclare function foo():string\\ndeclare namespace foo(){\\n  const bar:number\\n}\\n\")])])]),t(\"h3\",{attrs:{id:\"直接扩展全局变量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#直接扩展全局变量\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 直接扩展全局变量\")]),e._v(\" \"),t(\"p\",[e._v(\"有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致ts编译报错，此时就需要扩展全局变量的类型。比如扩展string类型。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"interface String{\\n  prependHello():string\\n}\\n'foo'.prependHell()\\n\")])])]),t(\"p\",[e._v(\"通过声明合并，使用interface String即可给String添加属性和方法。\")]),e._v(\" \"),t(\"p\",[e._v(\"也可以使用 declare namespace 给已有的命名空间添加类型声明\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// type/jquery-plugin/index.d.ts\\ndeclare namespace JQuery{\\n  interface CustomOpitons{ //注意这里是类型声明 不是对象的子对象\\n    bar:string\\n  }\\n}\\n\\ninterface JQueryStatic{\\n  foo(options:JQuery.CustomOptions):string //此处使用了添加的声明类型\\n}\\n\\n// src/index.ts\\n\\njQuery.foo({\\n  bar:''\\n})\\n\")])])])])}],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}
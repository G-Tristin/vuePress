{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{194:function(n,o,t){\"use strict\";t.r(o);var a=t(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,o=n.$createElement,t=n._self._c||o;return t(\"div\",{staticClass:\"content\"},[t(\"h1\",{attrs:{id:\"option与action的理解\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#option与action的理解\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" option与action的理解\")]),n._v(\" \"),t(\"p\",[n._v(\"option是给命令添加选项，并且可以配置一些选项的信息，以及处理选项的一些回调函数.的而action一般是给命令添加参数或者添加子命令而出发的函数.\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#区别\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 区别\")]),n._v(\" \"),t(\"p\",[n._v(\"option当中的回调函数的this指向是node对象，而action的this指向是当前的command实例(如果是子命令下的action那么this就指向当前的子命令的command对象)\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"触发机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#触发机制\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" 触发机制\")]),n._v(\" \"),t(\"p\",[n._v(\"option当中的回调函数的触发时机在使用了这个选项的时候就会触发，而action的触发机制则是在设置了参数\"),t(\"code\",[n._v(\"commander.arguments\")]),n._v(\"以及在命令行使用来参数的时候就会触发，或者使用\"),t(\"code\",[n._v(\"commander.command()\")]),n._v(\"设置子命令之后，调用了该子命令就会触发action.并且arguments当中的参数 以及command当中的参数都会被设置到action的参数当中.又有action当中的this指向指向的是当前的command对象，我们可以通过this.[option]来判断时候是存在该指令，如果存在那么可以采取相应的操作...\")]),n._v(\" \"),t(\"p\",[n._v(\"猜想: 是否可以理解为子命令其实就是在该父命令上添加了一个参数而已.应该是触发的原理相同但是实现的原理不同.\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"command对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#command对象\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" command对象\")]),n._v(\" \"),t(\"p\",[n._v(\"commande对象下的常见属性有一下几个\")]),n._v(\" \"),t(\"ul\",[t(\"li\",[n._v(\"commands ---该command命令下的子命令 是一个数组对象\")]),n._v(\" \"),t(\"li\",[n._v(\"options  ---该命令的选项 是一个数组 里面包含了该命令所拥有的所有选项对象\")]),n._v(\" \"),t(\"li\",[n._v(\"_args    ---该命令的参数信息 是一个数组  里面包含了该命令的所有参数以及参数的描述信息\")]),n._v(\" \"),t(\"li\",[n._v(\"_name    ---该命令的名称\")]),n._v(\" \"),t(\"li\",[n._v(\"parent   ---该命令的父级命令对象\")]),n._v(\" \"),t(\"li\",[n._v(\"_description ---描述信息\")]),n._v(\" \"),t(\"li\",[n._v(\"_events  ---一个包含该命令的option以及action的所有回调函数事件\")]),n._v(\" \"),t(\"li\",[n._v(\"_eventsCount  --- 事件的个数总和\")]),n._v(\" \"),t(\"li\",[n._v(\"还有最后一个关键的属性:[option] ，这是一个不一定存在的属性 属性值为boolean.决定他的存在因数是option，如果存在\"),t(\"code\",[n._v(\"command.option('-l， --list')\")]),n._v(\"那么就会存在一个属性值为true的list属性\")])]),n._v(\" \"),t(\"p\",[n._v(\"参考代码：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"const commander = require('commander')\\ncommander\\n.version('1.0.0')\\n.option('-a， --all'，'参看说明'，function(){\\n  console.log(1)\\n})\\n.option('-n， --number <n>'，'传入一个数字'，function(a){\\n  console.log(a，this)\\n})\\n.arguments('[a]')\\n.action(function(a){\\n  console.log(a)\\n})\\n\\ncommander //创建一个子命令配置参数和选项最好和父命令分开 避免混淆\\n.command('create <project>')\\n.description('创建一个新的应用')\\n.option('-l， --list [a]'，'试一试这个子命令下的规则'，function(a){\\n  // console.log(this) //在option的回调函数中的的this指向的是process进程\\n})\\n.action(function(b){\\n  // console.log(this) //在action的回调函数当中的this指向是子command对象\\n})\\n// console.log(commander) //这个commander对象指的是最外层的commander对象\\ncommander.parse(process.argv)\\n\")])])])])}],!1,null,null,null);i.options.__file=\"option与action.md\";o.default=i.exports}}]);","extractedComments":[]}